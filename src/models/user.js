const mongoose = require('mongoose');
const validator = require('validator');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const Task = require('../models/task');

const userSchema = new mongoose.Schema({
    name: {
        type: String,
        required: true,
        trim: true
    },
    email: {
        type: String,
        unique: true,
        required: true,
        trim: true,
        lowercase: true,
        validate(value) {
            if(!validator.isEmail(value)) {
                throw new Error('Email is invalid');
            }
        }
    },
    password: {
        type: String,
        required: true,
        minlength: [7, 'Minimum password length should be 7'],
        trim: true,
        validate(value) {
            if (value.toLowerCase().includes('password')){
                throw new Error('Password can not contain "password"');
            }
        }
    },
    age: {
        type: Number,
        default: 999,
        validate(value) {
            if (value < 0) {
                throw new Error('Age must be a positive number!');
            }
        }
    },
    tokens: [{
        token: {
            type: String,
            required: true
        }
    }],
    avatar: {
        type: Buffer
    }
}, {
    timestamps: true
});

//Virtual Property is a relationship between two entities(from two separate documents) => its not actual data in database
//It helps mongoose what belongs to what model and how they are related
userSchema.virtual('tasks', {
    ref: 'Task',
    localField: '_id',
    foreignField: 'owner'
});

//To hide confidential data from client using toJSON()
userSchema.methods.toJSON = function() {
    const user = this;
    const userObject = user.toObject(); //Return a JavaScript object value (from mongoose model)


    delete userObject.password;
    delete userObject.tokens;
    delete userObject.avatar;

    return userObject;
};

//Create generateauthtoken() using jsonwebtoken sign method => it returns token
userSchema.methods.generateAuthToken = async function(){

    const user = this;
    const token = jwt.sign({ _id: user._id.toString() }, process.env.JWT_SECRET);

    user.tokens = user.tokens.concat({ token });
    await user.save();

    return token;

};

//Authenticating User using Login credentials
userSchema.statics.findByCredentials = async (email, password) => {

    const user = await User.findOne({ email });

    if (!user) {
        throw new Error('Unable to login!')
    }

    const isMatch = await bcrypt.compare(password, user.password);

    if (!isMatch) {
        throw new Error('Unable to login!')
    }

    return user;

};

//Middleware => Hash the plain text password before saving
userSchema.pre('save', async function(next) {

    const user = this;

    if(user.isModified('password')){
        user.password = await bcrypt.hash(user.password, 8);
    }
    // console.log(user);
    // console.log('Just before saving!')

    next();

});

//Delete associated user's tasks when a user is deleted
userSchema.pre('remove', async function(next) {

    const user = this;

        await Task.deleteMany({ owner: user._id });

    next();

});

const User = mongoose.model('User', userSchema);


module.exports = User;

/**
 * Middleware gives us a scope to register and to run functions before or after, a given
 * events occur
 *
 * In middleware next() means we are done so go to next step. In our case if we do not use
 * next() in => then user will never get saved as PRE-function will think we still have some
 * thing to Execute
 *
 * We can not use (ARROW) function as second argument here because Arrow function does not BIND => "THIS"
 *
 * userSchema.pre('save', async function(next) {
 *
 * const user = this;
 * console.log('Just before saving!')
 *
 * next();
 *
 * );
 *
 *
 * By setting up a value on [Schema.statics] => [userSchema.statics.findByCredentials()] => we can access directly on the User Model when we
 * have access to it (from outside of the Model)
 *  [statics] methods are accessible to the MODEL
 *
 *  [Scheme.methods] => creates methods that accessible to instances => instance method
 *
 *
 *  JSON WEB TOKEN
 *  const jwt = require('jsonwebtoken');
 *
 *  const token = jwt.sign({ _id: user._id.toString() }, 'thisisnodetutorial'); =>
 *  jwt.sign(
 *  { payload object to uniquely identify the user },
 *  'SECRET KEY'
 *  );
 *  => method toString() is needed because user._id is a object id not a standard string so we need to use toString() to
 *  consvert this id to Standard String
 *
 *  tokens: [{ token: { type: string, required: true } }] => Generated by Server to store token for authenticating users.
 *
 *
 *
 * toJSON() =>
 *
 * const pet = {
 *    name: "Hal"
 * }
 *
 * pet.toJSON = function() {
 *     return {};
 * }
 *
 * console.log(JSON.stringify(pet))
 *
 * OUTPUT => {}
 *
 * So, when ever we call toJSON() => JSON.strigify would be called and it will show the return value from toJSON() method.
 * its done automatically.
 * Here when ever we use res.send(user) => user will not send password and tokens as in USER model toJSON() is used to cut
 * these values off.
 */
